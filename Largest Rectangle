#include <assert.h>
#include <ctype.h>
#include <limits.h>
#include <math.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char* readline();
char* ltrim(char*);
char* rtrim(char*);
char** split_string(char*);

int parse_int(char*);

typedef struct {
    int index;
    int height;
} StackNode;

void push(StackNode** stack, int* top, int index, int height) {
    (*top)++;
    stack[*top] = (StackNode*)malloc(sizeof(StackNode));
    stack[*top]->index = index;
    stack[*top]->height = height;
}

StackNode* pop(StackNode** stack, int* top) {
    StackNode* node = stack[*top];
    (*top)--;
    return node;
}

int isEmpty(int top) {
    return top == -1;
}

long largestRectangle(int h_count, int* h) {
    StackNode* stack[h_count];
    int top = -1;
    long max_area = 0;
    int index = 0;

    while (index < h_count) {
        if (isEmpty(top) || h[stack[top]->index] <= h[index]) {
            push(stack, &top, index, h[index]);
            index++;
        } else {
            StackNode* top_of_stack = pop(stack, &top);
            int height = top_of_stack->height;
            int width = isEmpty(top) ? index : index - stack[top]->index - 1;
            long area = (long)height * width;
            if (area > max_area) {
                max_area = area;
            }
            free(top_of_stack);
        }
    }

    while (!isEmpty(top)) {
        StackNode* top_of_stack = pop(stack, &top);
        int height = top_of_stack->height;
        int width = isEmpty(top) ? index : index - stack[top]->index - 1;
        long area = (long)height * width;
        if (area > max_area) {
            max_area = area;
        }
        free(top_of_stack);
    }

    return max_area;
}

int main() {
    int n = parse_int(ltrim(rtrim(readline())));
    char** h_temp = split_string(rtrim(readline()));

    int* h = (int*)malloc(n * sizeof(int));
    for (int i = 0; i < n; i++) {
        h[i] = parse_int(h_temp[i]);
    }

    long result = largestRectangle(n, h);
    printf("%ld\n", result);

    free(h);
    return 0;
}

char* readline() {
    size_t alloc_length = 1024;
    size_t data_length = 0;

    char* data = (char*)malloc(alloc_length);

    while (true) {
        char* cursor = data + data_length;
        char* line = fgets(cursor, alloc_length - data_length, stdin);

        if (!line) {
            break;
        }

        data_length += strlen(cursor);

        if (data_length < alloc_length - 1 || data[data_length - 1] == '\n') {
            break;
        }

        alloc_length <<= 1;
        data = (char*)realloc(data, alloc_length);

        if (!data) {
            break;
        }
    }

    if (data[data_length - 1] == '\n') {
        data[data_length - 1] = '\0';
    }

    data = (char*)realloc(data, data_length + 1);
    data[data_length] = '\0';

    return data;
}

char* ltrim(char* str) {
    if (!str) {
        return NULL;
    }

    if (!*str) {
        return str;
    }

    while (*str != '\0' && isspace(*str)) {
        str++;
    }

    return str;
}

char* rtrim(char* str) {
    if (!str) {
        return NULL;
    }

    if (!*str) {
        return str;
    }

    char* end = str + strlen(str) - 1;
    while (end >= str && isspace(*end)) {
        end--;
    }

    *(end + 1) = '\0';

    return str;
}

char** split_string(char* str) {
    char** splits = NULL;
    char* token = strtok(str, " ");
    int spaces = 0;

    while (token) {
        splits = (char**)realloc(splits, sizeof(char*) * ++spaces);
        if (!splits) {
            return splits;
        }

        splits[spaces - 1] = token;
        token = strtok(NULL, " ");
    }

    return splits;
}

int parse_int(char* str) {
    char* endptr;
    int value = strtol(str, &endptr, 10);

    if (endptr == str || *endptr != '\0') {
        exit(EXIT_FAILURE);
    }

    return value;
}
