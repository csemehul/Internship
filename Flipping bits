#include <assert.h>
#include <ctype.h>
#include <limits.h>
#include <math.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char* readline();
char* ltrim(char*);
char* rtrim(char*);
int parse_int(char*);
long parse_long(char*);

/*
 * Complete the 'flippingBits' function below.
 *
 * The function is expected to return a LONG_INTEGER.
 * The function accepts LONG_INTEGER n as parameter.
 */

long flippingBits(long n) {
    return ~n & 0xFFFFFFFF;
}

int main() {
    // Reading the number of queries
    int q = parse_int(ltrim(rtrim(readline())));
    
    for (int i = 0; i < q; i++) {
        // Reading the integer for the current query
        long n = parse_long(ltrim(rtrim(readline())));
        
        // Flipping the bits and printing the result
        long result = flippingBits(n);
        printf("%lu\n", result);
    }
    
    return 0;
}

// Function to read a line of input from standard input
char* readline() {
    size_t alloc_length = 1024;
    size_t data_length = 0;
    char* data = malloc(alloc_length);
    
    if (!data) {
        return NULL;
    }

    while (true) {
        char* cursor = data + data_length;
        char* line = fgets(cursor, alloc_length - data_length, stdin);

        if (!line) {
            break;
        }

        data_length += strlen(cursor);

        if (data_length < alloc_length - 1 || data[data_length - 1] == '\n') {
            break;
        }

        size_t new_length = alloc_length << 1;
        data = realloc(data, new_length);

        if (!data) {
            break;
        }

        alloc_length = new_length;
    }

    if (data[data_length - 1] == '\n') {
        data[data_length - 1] = '\0';
    }

    data = realloc(data, data_length + 1);

    return data;
}

// Function to trim leading whitespace
char* ltrim(char* str) {
    if (!str || *str == '\0') {
        return str;
    }

    while (*str != '\0' && isspace(*str)) {
        str++;
    }

    return str;
}

// Function to trim trailing whitespace
char* rtrim(char* str) {
    if (!str || *str == '\0') {
        return str;
    }

    char* end = str + strlen(str) - 1;

    while (end >= str && isspace(*end)) {
        end--;
    }

    *(end + 1) = '\0';

    return str;
}

// Function to parse an integer from a string
int parse_int(char* str) {
    return strtol(str, NULL, 10);
}

// Function to parse a long integer from a string
long parse_long(char* str) {
    return strtoll(str, NULL, 10);
}
